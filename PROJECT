import tkinter as tk
from tkinter import messagebox
import mysql.connector
from datetime import datetime

# student ID and subject
entered_student_id = ""
entered_subject = ""

# Entry widgets
entry_student_id = None
entry_subject = None
attendance_label = None  # display live attendance

def return_to_home(root_window):
    root_window.destroy()
    login_window.deiconify()

# Function to handle teacher login
def teacher_login():
    username = entry_username.get()
    password = entry_password.get()

    # Check teacher credentials
    if username == "kartik" and password == "kartik1234":  # add more teachers if needed
        open_attendance_window()
    elif username == "khushi" and password == "kartik1234":  
        open_attendance_window()
    else:
        messagebox.showwarning("Login Failed", "Invalid credentials")

# Function to handle student login
def student_login():
    global entered_student_id

    student_id = entry_student_id.get()

    # Check if the ID is not empty
    if not student_id:
        messagebox.showwarning("Warning", "Please enter your Student ID")
        return

    entered_student_id = student_id  

    # Connect to the MySQL database
    connection = mysql.connector.connect(
        host="127.0.0.1",
        user="root",
        password="#LOWSPECGAMER1234@",
        database="attendance_system"
    )
    cursor = connection.cursor()

    # Check if the student ID exists in the 'students' table
    cursor.execute("SELECT COUNT(*) FROM attendance WHERE student_id = %s", (student_id,))
    result = cursor.fetchone()

    if result[0] > 0:
        # Open individual attendance window for the student
        open_student_attendance_window(student_id)
    else:
        messagebox.showinfo("Student Login", "Student ID not found.")

    # Close the database connection
    connection.close()

# Function to open attendance window
def open_attendance_window():
    # Local entry_student_id variable
    entry_student_id = None
    
    login_window.withdraw()  

    # Main Tkinter window
    root = tk.Tk()
    root.title("Teacher Attendance System")
    root.geometry("1920x1080")  
    root.configure(bg="#E6E6E6")  

    # entering student ID
    label_student_id = tk.Label(root, text="Enter Student ID:", bg="#E6E6E6", font=("Arial", 16))
    label_student_id.pack(pady=20)
    entry_student_id = tk.Entry(root, font=("Arial", 14))
    entry_student_id.pack(pady=10)

    # Entering subject
    label_subject = tk.Label(root, text="Enter Subject:", bg="#E6E6E6", font=("Arial", 16))
    label_subject.pack(pady=20)
    entry_subject = tk.Entry(root, font=("Arial", 14))
    entry_subject.pack(pady=10)

    # Button to mark attendance
    btn_mark_attendance = tk.Button(root, text="Mark Attendance", command=lambda: mark_attendance(entry_student_id, entry_subject), bg="#4CAF50", fg="white", font=("Arial", 14))
    btn_mark_attendance.pack(pady=30)

    # Button to return to home page
    btn_return_home = tk.Button(root, text="Return to Home Page", command=lambda: return_to_home(root), bg="#FF5733", fg="white", font=("Arial", 14))
    btn_return_home.pack(pady=20)

    
    root.mainloop()
    
# student attendance window
def open_student_attendance_window(student_id):
    login_window.withdraw()  # Hide login window

    # Student Attendance Tkinter window
    student_root = tk.Tk()
    student_root.title("Student Attendance System")
    student_root.geometry("1920x1080")  
    student_root.configure(bg="#E6E6E6")  

    # Label to display student ID
    label_student_id = tk.Label(student_root, text=f"Student ID: {student_id}", bg="#E6E6E6", font=("Arial", 16))
    label_student_id.pack(pady=20)

    # check attendance
    label_subject_check = tk.Label(student_root, text="Enter Subject to Check Attendance:", bg="#E6E6E6", font=("Arial", 16))
    label_subject_check.pack(pady=20)
    entry_subject_check = tk.Entry(student_root, font=("Arial", 14))
    entry_subject_check.pack(pady=10)

    # Button to check individual attendance
    btn_check_attendance = tk.Button(student_root, text="Check Attendance", command=lambda: check_attendance(student_id, entry_subject_check.get()), bg="#007BFF", fg="white", font=("Arial", 14))
    btn_check_attendance.pack(pady=30)

    # Display total attendance for a subject
    label_total_attendance = tk.Label(student_root, text="", bg="#E6E6E6", font=("Arial", 16))
    label_total_attendance.pack(pady=20)

    # Function to update total attendance label
    def update_total_attendance():
        subject = entry_subject_check.get()
        total_attendance = get_total_attendance_for_student(student_id, subject)
        label_total_attendance.config(text=f"Total Attendance in {subject}: {total_attendance}")

    # Button to update total attendance
    btn_update_total_attendance = tk.Button(student_root, text="Update Total Attendance", command=update_total_attendance, bg="#007BFF", fg="white", font=("Arial", 14))
    btn_update_total_attendance.pack(pady=20)

    # Button to return to home page
    btn_return_home = tk.Button(student_root, text="Return to Home Page", command=lambda: return_to_home(student_root), bg="#FF5733", fg="white", font=("Arial", 14))
    btn_return_home.pack(pady=30)

    # Run the Tkinter main loop for student attendance
    student_root.after(1000, update_live_attendance) 
    student_root.mainloop()

def update_live_attendance():
    
    live_attendance = get_live_attendance(entered_student_id)
    attendance_label.config(text=f"Live Attendance: {live_attendance}")

    
    attendance_label.after(1000, update_live_attendance)

def get_live_attendance(student_id):
    # Connect to the MySQL database
    connection = mysql.connector.connect(
        host="127.0.0.1",
        user="root",
        password="#LOWSPECGAMER1234@",
        database="attendance_system"
    )
    cursor = connection.cursor()

   
    cursor.execute("SELECT COUNT(*) FROM attendance WHERE student_id = %s", (student_id,))
    result = cursor.fetchone()

    # Close the database connection
    connection.close()

    return result[0]

# attendance
def mark_attendance(entry_student_id, entry_subject):
    global entered_student_id, entered_subject

    # Check if the ID and subject are not empty
    entered_student_id = entry_student_id.get()
    entered_subject = entry_subject.get()

    if not entered_student_id or not entered_subject:
        messagebox.showwarning("Warning", "Please enter both Student ID and Subject")
        return

    # Connect to the MySQL database
    connection = mysql.connector.connect(
        host="127.0.0.1",
        user="root",
        password="#LOWSPECGAMER1234@",
        database="attendance_system"
    )
    cursor = connection.cursor()

    # Create the 'attendance' table if not exists
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS attendance (
            id INT AUTO_INCREMENT PRIMARY KEY,
            student_id VARCHAR(255),
            subject VARCHAR(255),
            date DATETIME
        )
    ''')

    # Insert the attendance record into the database
    cursor.execute("INSERT INTO attendance (student_id, subject, date) VALUES (%s, %s, %s)", (entered_student_id, entered_subject, str(datetime.now())))
    connection.commit()

    # Close the database connection
    connection.close()

    # Clear the entry fields after marking attendance
    entry_student_id.delete(0, tk.END)
    entry_subject.delete(0, tk.END)
    messagebox.showinfo("Success", "Attendance marked successfully")

# Function to check individual attendance for a subject
def check_attendance(student_id, subject):
    # Check if the ID and subject are not empty
    if not student_id or not subject:
        messagebox.showwarning("Warning", "Please enter both Student ID and Subject")
        return

    # Connect to the MySQL database
    connection = mysql.connector.connect(
        host="127.0.0.1",
        user="root",
        password="#LOWSPECGAMER1234@",
        database="attendance_system"
    )
    cursor = connection.cursor()

    # Check if the attendance record exists
    cursor.execute("SELECT COUNT(*) FROM attendance WHERE student_id = %s AND subject = %s", (student_id, subject))
    result = cursor.fetchone()

    if result[0] > 0:
        messagebox.showinfo("Attendance Check", f"Attendance found for Student ID {student_id} in {subject}.")
    else:
        messagebox.showinfo("Attendance Check", f"No attendance record found for Student ID {student_id} in {subject}.")

    # Close the database connection
    connection.close()

def get_total_attendance_for_student(student_id, subject):
    # Connect to the MySQL database
    connection = mysql.connector.connect(
        host="127.0.0.1",
        user="root",
        password="#LOWSPECGAMER1234@",
        database="attendance_system"
    )
    cursor = connection.cursor()

    # Query to get the total attendance for a subject for a specific student
    cursor.execute("SELECT COUNT(*) FROM attendance WHERE student_id = %s AND subject = %s", (student_id, subject))
    total_attendance = cursor.fetchone()[0]

    # Close the database connection
    connection.close()

    return total_attendance

# Login screen
login_window = tk.Tk()
login_window.title("Login")
login_window.geometry("1920x1080")
login_window.configure(bg="#E6E6E6")  

# teacher username
label_username = tk.Label(login_window, text="Teacher Username:", bg="#E6E6E6", font=("Arial", 16))
label_username.pack(pady=10)
entry_username = tk.Entry(login_window, font=("Arial", 14))
entry_username.pack(pady=10)

# teacher password
label_password = tk.Label(login_window, text="Teacher Password:", bg="#E6E6E6", font=("Arial", 16))
label_password.pack(pady=10)
entry_password = tk.Entry(login_window, show="*", font=("Arial", 14))
entry_password.pack(pady=10)

# Button to teacher login
btn_teacher_login = tk.Button(login_window, text="Teacher Login", command=teacher_login, bg="#4CAF50", fg="white", font=("Arial", 14))
btn_teacher_login.pack(pady=10)

# Separator
tk.Frame(height=2, bd=1, relief="groove", bg="#E6E6E6").pack(fill="x", padx=10, pady=5)

# student ID
label_student_id = tk.Label(login_window, text="Enter Student ID:", bg="#E6E6E6", font=("Arial", 16))
label_student_id.pack(pady=10)
entry_student_id = tk.Entry(login_window, font=("Arial", 14))
entry_student_id.pack(pady=10)

# Button to student login
btn_student_login = tk.Button(login_window, text="Student Login", command=student_login, bg="#007BFF", fg="white", font=("Arial", 14))
btn_student_login.pack(pady=20)

# Run the Tkinter main loop for the login screen
login_window.mainloop()
